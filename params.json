{"name":"Audiobox-jlib","tagline":"Next generation Java library for AudioBox API","body":"# PLEASE NOTE\r\nThis library is not yet ready for production. It is actually under heavy development and still requires some refactor.\r\nIt does not work on the actual API specifications, if you need a java library that works with the actual API please use\r\nthe old [AudioBox.fm-JavaLib](https://github.com/icoretech/AudioBox.fm-JavaLib).\r\n\r\n\r\n## Introduction\r\n`audiobox-jlib` is a simple library to control [AudioBox](https://audiobox.fm) account through its powerful API.\r\n\r\n\r\n[![Build Status](https://travis-ci.org/icoretech/audiobox-jlib.svg?branch=master)](https://travis-ci.org/icoretech/audiobox-jlib)\r\n\r\n## Minimum requirements\r\n* Java 1.7\r\n* Android Build Tools 19+ (for android projects)\r\n\r\n## Features\r\n* You can choose amongst 3 HTTP Transport out of the box and if you are not happy you can implement your own.\r\n* You can choose amongst 3 JSON parser (Jackson, Guava, AndroidJsonFactory)\r\n* Transparent OAuth2 authorization flow\r\n* Easy to use\r\n\r\n## Dependencies\r\n* [SLF4J](http://www.slf4j.org/) 1.7 (logging)\r\n* [Typesafe Config](https://github.com/typesafehub/config) 1.2.0 (configuration)\r\n* [Google HTTP Java Client](https://code.google.com/p/google-http-java-client/) 1.18 (HTTP layer)\r\n* [Google OAuth Java Client](https://code.google.com/p/google-oauth-java-client/) 1.18 (OAuth2 layer)\r\n* [Apache Common Validator](http://commons.apache.org/proper/commons-validator/) 1.4 (Utils)\r\n* [Apache Commons Lang](http://commons.apache.org/proper/commons-lang/) 3.3.2 (Utils)\r\n* [Java Object Diff](https://github.com/SQiShER/java-object-diff) 0.13.1 (Utils)\r\n\r\n\r\n## Getting started\r\n\r\n### 1. Add the dependency\r\n\r\nIf your project is under maven add this under the dependency management section:\r\n\r\n    <dependency>\r\n      <groupId>fm.audiobox</groupId>\r\n      <artifactId>audiobox-jlib</artifactId>\r\n      <version>1.0</version>\r\n    </dependency>\r\n\r\n\r\n### 2. Register your application\r\n\r\n1. Subscribe an AudioBox account [here](https://audiobox.fm/account/sign_up).\r\n2. Register your application [here](https://audiobox.fm/oauth2/applications).\r\n3. Take note of the API Consumer Key and Consumer Secret.\r\n\r\n\r\n### 3. Configure the client\r\n\r\nNow that you have all needed pieces you have to configure your client before making any operation:\r\n\r\n```java\r\nConfiguration config = new Configuration()\r\n  .setApiKey( \"[Your Consumer Key]\" )\r\n  .setApiSecret( \"[Your Consumer Secret]\" );\r\n```\r\n\r\n\r\nThrough the [Configuration](http://ci.icorete.ch/job/AudioBox-Jlib/javadoc/reference/fm/audiobox/core/config/Configuration.html)\r\nobject you can configure many aspects of the library behaviors; some are trivial such as application name, version, etc.\r\nand other are more complex such as HttpTransport or JSON parser.\r\n\r\n\r\nThis library does not offer a data store for credentials storage out of the box. You should provide\r\none like FileDataStoreFactory, MemoryDataStoreFactory or implementing one\r\nby extending the [AbstractDataStoreFactory](https://code.google.com/p/google-http-java-client/source/browse/google-http-client/src/main/java/com/google/api/client/util/store/AbstractDataStoreFactory.java).\r\nThis data store is used to store credentials so you should be really carefully with it.\r\n\r\nTo set it use the configuration:\r\n\r\n```java\r\nconfig.setDataStoreFactory( new MyDataStoreFactory() );\r\n```\r\n\r\n\r\nSince this library wants to be as much agnostic as possible regarding the HTTP client and\r\nthe JSON parser libraries you should set them at this moment by choosing amongst:\r\n\r\n* **NetHttpTransport:** based on HttpURLConnection that is found in all Java SDKs, and thus usually the simplest choice.\r\n* **ApacheHttpTransport:** based on the popular Apache HttpClient that allows for more customization.\r\n* **UrlFetchTransport:** based on URL Fetch Java API in the Google App Engine SDK\r\n\r\nas HTTP transport, and:\r\n\r\n* **JacksonFactory:** based on the popular Jackson library which is considered the fastest in terms of parsing/serialization speed\r\n* **GsonFactory:** based on the Google GSON library which is a lighter-weight option (small size) that is pretty fast also (though not quite as fast as Jackson)\r\n* **AndroidJsonFactory:** based on the JSON library built-in to Android Honeycomb (SDK 3.0) or higher that is identical to the Google GSON library\r\n\r\nas JSON parser library.\r\n\r\nThere are no defaults that's why you must provide them through the configuration:\r\n\r\n```java\r\nconfig\r\n .setHttpTransport( new NetHttpTransport() )\r\n .setJsonFactory( new JacksonFactory() );\r\n```\r\n\r\n\r\n### 4. Authorize the user account\r\n\r\nWe just gone through the basic configuration and once the setup is completed you can create your Client,\r\nbut we still need to authorize the application to start performing any kind of operation supported by AudioBox API:\r\n\r\n```java\r\nClient client = new Client( config );\r\nclient.authorize( \"username\", \"password\" );\r\n...\r\n```\r\n\r\n\r\nWhen the application is successfully authorized a grant token is stored in the configured data store.\r\nKeep in mind that grant tokens may expires at any time. A request against AudioBox with an expired token will result in\r\nan AuthorizationException. Your application should be ready to trap it in order to present a new login form.\r\n\r\n\r\n### 5. Browse the collection\r\nNow that the client is configured and authorized we can browse and perform any API-supported operation on AudioBox:\r\n\r\nGet user information:\r\n```java\r\nclient.getUser();\r\n```\r\n\r\nGet user's playlists:\r\n```java\r\nclient.getPlaylists();\r\n```\r\n\r\nOr some other MediaFile operation:\r\n\r\n```java\r\n// Load playlists\r\nList<Playlist> playlists = client.getPlaylists();\r\nPlaylist p = playlists.get(0);\r\n\r\n// Load media files\r\nList<MediaFile> mfs = p.getMediaFiles(client);\r\nMediaFile m = mfs.get(0);\r\n\r\n// Edit some label\r\nm.setTitle(\"foo\");\r\nm.setArtist(\"bar\");\r\n\r\n// Save modifications\r\nm.update(client);\r\n```\r\n\r\n\r\nTo know more about this library checkout the [JavaDoc](http://ci.icorete.ch/job/AudioBox-Jlib/javadoc/reference/packages.html).\r\n\r\n\r\n## Use cases\r\n* [AudioBox for Android](https://play.google.com/store/apps/details?id=fm.audiobox)\r\n\r\n\r\n## Contribute\r\n* Get familiar with the philosophy of the library design.\r\n* [Check for open issues](https://bitbucket.org/keytwo/audiobox-jlib/issues?status=new&status=open) or open a new issue to fill a bug or a feature request.\r\n* Fork the audiobox-jlib on Github and make your changes.\r\n* Write some tests which show that the bug was fixed or that the feature works as expected.\r\n* Send a pull request to get changes merged and published.\r\n\r\n\r\n## Gradle Tasks for library developers\r\n\r\n\r\nTo generate test coverage report run\r\n\r\n    gradle test jacocoTestReport\r\n\r\n\r\nTo generate JDoc run\r\n\r\n    gradle generateDoclava\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}